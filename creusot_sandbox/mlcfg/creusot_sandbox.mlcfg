
module CreusotSandbox_Gcd_LemmaPreserveCdAdd_Interface
  use mach.int.Int
  val lemma_preserve_cd_add [#"../../src/gcd.rs" 6 0 6 26] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 3 0 5 85] forall d : int . forall q : int . forall p : int . d <> 0 -> 0 <= p -> 0 <= q -> mod p d = 0 -> mod q d = 0 -> mod (p + q) d = 0 }
    
end
module CreusotSandbox_Gcd_LemmaPreserveCdAdd
  use mach.int.Int
  let rec cfg lemma_preserve_cd_add [#"../../src/gcd.rs" 6 0 6 26] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 3 0 5 85] forall d : int . forall q : int . forall p : int . d <> 0 -> 0 <= p -> 0 <= q -> mod p d = 0 -> mod q d = 0 -> mod (p + q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotSandbox_Gcd_LemmaPreserveCdSub_Interface
  use mach.int.Int
  val lemma_preserve_cd_sub [#"../../src/gcd.rs" 11 0 11 26] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 8 0 10 86] forall d : int . forall q : int . forall p : int . d <> 0 -> 0 <= q -> q <= p -> mod p d = 0 -> mod q d = 0 -> mod (p - q) d = 0 }
    
end
module CreusotSandbox_Gcd_LemmaPreserveCdSub
  use mach.int.Int
  let rec cfg lemma_preserve_cd_sub [#"../../src/gcd.rs" 11 0 11 26] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 8 0 10 86] forall d : int . forall q : int . forall p : int . d <> 0 -> 0 <= q -> q <= p -> mod p d = 0 -> mod q d = 0 -> mod (p - q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotSandbox_Gcd_LemmaDivisorMult_Interface
  use mach.int.Int
  val lemma_divisor_mult [#"../../src/gcd.rs" 16 0 16 23] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 13 0 15 48] forall d : int . forall q : int . forall p : int . d <> 0 -> mod q d = 0 -> mod (p * q) d = 0 }
    
end
module CreusotSandbox_Gcd_LemmaDivisorMult
  use mach.int.Int
  let rec cfg lemma_divisor_mult [#"../../src/gcd.rs" 16 0 16 23] [@cfg:stackify] [@cfg:subregion_analysis] (_1' : ()) : ()
    ensures { [#"../../src/gcd.rs" 13 0 15 48] forall d : int . forall q : int . forall p : int . d <> 0 -> mod q d = 0 -> mod (p * q) d = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotSandbox_Gcd_IsCommonDivisor_Stub
  use mach.int.Int
  function is_common_divisor [#"../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool
end
module CreusotSandbox_Gcd_IsCommonDivisor_Interface
  use mach.int.Int
  function is_common_divisor [#"../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool
end
module CreusotSandbox_Gcd_IsCommonDivisor
  use mach.int.Int
  function is_common_divisor [#"../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool =
    [#"../../src/gcd.rs" 20 4 20 38] mod a d = 0 /\ mod b d = 0 /\ d <> 0
  val is_common_divisor [#"../../src/gcd.rs" 19 0 19 52] (a : int) (b : int) (d : int) : bool
    ensures { result = is_common_divisor a b d }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Borrow
  val swap (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotSandbox_Gcd_Gcd_Interface
  use mach.int.UInt64
  use mach.int.Int
  clone CreusotSandbox_Gcd_IsCommonDivisor_Stub as IsCommonDivisor0
  val gcd [#"../../src/gcd.rs" 26 0 26 33] (a : uint64) (b : uint64) : uint64
    requires {[#"../../src/gcd.rs" 23 11 23 29] UInt64.to_int a <> 0 /\ UInt64.to_int b <> 0}
    ensures { [#"../../src/gcd.rs" 24 10 24 44] IsCommonDivisor0.is_common_divisor (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int result) }
    ensures { [#"../../src/gcd.rs" 25 0 25 77] forall d : uint64 . IsCommonDivisor0.is_common_divisor (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int d) -> mod (UInt64.to_int result) (UInt64.to_int d) = 0 }
    
end
module CreusotSandbox_Gcd_Gcd
  use mach.int.Int
  use mach.int.UInt64
  use prelude.Borrow
  use int.MinMax
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve2 with
    type t = uint64
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = uint64
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = uint64
  clone CreusotSandbox_Gcd_LemmaDivisorMult_Interface as LemmaDivisorMult0
  clone CreusotSandbox_Gcd_LemmaPreserveCdSub_Interface as LemmaPreserveCdSub0
  clone CreusotSandbox_Gcd_LemmaPreserveCdAdd_Interface as LemmaPreserveCdAdd0
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve0 with
    type t1 = uint64,
    type t2 = uint64,
    predicate Resolve0.resolve = Resolve2.resolve,
    predicate Resolve1.resolve = Resolve2.resolve
  clone CreusotSandbox_Gcd_IsCommonDivisor as IsCommonDivisor0
  let rec cfg gcd [#"../../src/gcd.rs" 26 0 26 33] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint64) (b : uint64) : uint64
    requires {[#"../../src/gcd.rs" 23 11 23 29] UInt64.to_int a <> 0 /\ UInt64.to_int b <> 0}
    ensures { [#"../../src/gcd.rs" 24 10 24 44] IsCommonDivisor0.is_common_divisor (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int result) }
    ensures { [#"../../src/gcd.rs" 25 0 25 77] forall d : uint64 . IsCommonDivisor0.is_common_divisor (UInt64.to_int a) (UInt64.to_int b) (UInt64.to_int d) -> mod (UInt64.to_int result) (UInt64.to_int d) = 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var a_1 : uint64;
  var b_2 : uint64;
  var x_6 : uint64;
  var y_7 : uint64;
  var _8 : (uint64, uint64);
  var _9 : bool;
  var _10 : uint64;
  var _11 : uint64;
  var _12 : uint64;
  var _13 : uint64;
  var _14 : uint64;
  var _15 : uint64;
  var _16 : ();
  var _18 : ();
  var _20 : ();
  var _24 : ();
  var _25 : bool;
  var _26 : uint64;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  var _30 : ();
  var _32 : ();
  var _34 : ();
  var _36 : ();
  var _38 : uint64;
  var _39 : uint64;
  var _40 : bool;
  var _41 : ();
  var _42 : borrowed uint64;
  var _43 : borrowed uint64;
  var _44 : borrowed uint64;
  var _45 : borrowed uint64;
  var _46 : ();
  var _47 : ();
  var _48 : ();
  var _49 : ();
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _10 <- a_1;
    _11 <- b_2;
    _9 <- ([#"../../src/gcd.rs" 27 28 27 33] _10 < _11);
    switch (_9)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _12 <- a_1;
    _13 <- b_2;
    _8 <- (_12, _13);
    goto BB3
  }
  BB2 {
    _14 <- b_2;
    _15 <- a_1;
    _8 <- (_14, _15);
    goto BB3
  }
  BB3 {
    x_6 <- (let (a, _) = _8 in a);
    y_7 <- (let (_, a) = _8 in a);
    assume { Resolve0.resolve _8 };
    assert { [#"../../src/gcd.rs" 28 18 28 36] UInt64.to_int x_6 = MinMax.min (UInt64.to_int a_1) (UInt64.to_int b_2) };
    _16 <- ();
    assert { [#"../../src/gcd.rs" 29 18 29 36] UInt64.to_int y_7 = MinMax.max (UInt64.to_int a_1) (UInt64.to_int b_2) };
    _18 <- ();
    goto BB4
  }
  BB4 {
    invariant cd { [#"../../src/gcd.rs" 31 4 31 96] forall d : int . IsCommonDivisor0.is_common_divisor (UInt64.to_int x_6) (UInt64.to_int y_7) d = IsCommonDivisor0.is_common_divisor (UInt64.to_int a_1) (UInt64.to_int b_2) d };
    invariant le_xy { [#"../../src/gcd.rs" 33 23 33 31] UInt64.to_int x_6 <= UInt64.to_int y_7 };
    invariant y_pos { [#"../../src/gcd.rs" 34 23 34 29] UInt64.to_int y_7 > 0 };
    _26 <- x_6;
    _25 <- ([#"../../src/gcd.rs" 35 10 35 16] _26 <> ([#"../../src/gcd.rs" 35 15 35 16] (0 : uint64)));
    switch (_25)
      | False -> goto BB11
      | True -> goto BB5
      end
  }
  BB5 {
    _27 <- ([#"../../src/gcd.rs" 36 8 36 31] LemmaPreserveCdAdd0.lemma_preserve_cd_add ());
    goto BB6
  }
  BB6 {
    _28 <- ([#"../../src/gcd.rs" 37 8 37 31] LemmaPreserveCdSub0.lemma_preserve_cd_sub ());
    goto BB7
  }
  BB7 {
    _29 <- ([#"../../src/gcd.rs" 38 8 38 28] LemmaDivisorMult0.lemma_divisor_mult ());
    goto BB8
  }
  BB8 {
    assert { [#"../../src/gcd.rs" 40 22 40 52] UInt64.to_int y_7 = div (UInt64.to_int y_7) (UInt64.to_int x_6) * UInt64.to_int x_6 + mod (UInt64.to_int y_7) (UInt64.to_int x_6) };
    _30 <- ();
    assert { [#"../../src/gcd.rs" 41 8 41 87] forall d : int . IsCommonDivisor0.is_common_divisor (UInt64.to_int x_6) (mod (UInt64.to_int y_7) (UInt64.to_int x_6)) d -> mod (UInt64.to_int y_7) d = 0 };
    _32 <- ();
    assert { [#"../../src/gcd.rs" 42 22 42 53] mod (UInt64.to_int y_7) (UInt64.to_int x_6) = UInt64.to_int y_7 - div (UInt64.to_int y_7) (UInt64.to_int x_6) * UInt64.to_int x_6 };
    _34 <- ();
    assert { [#"../../src/gcd.rs" 43 8 44 91] forall d : int . IsCommonDivisor0.is_common_divisor (UInt64.to_int x_6) (UInt64.to_int y_7) d -> mod (UInt64.to_int y_7 - div (UInt64.to_int y_7) (UInt64.to_int x_6) * UInt64.to_int x_6) d = 0 };
    _36 <- ();
    _38 <- y_7;
    _39 <- x_6;
    _40 <- ([#"../../src/gcd.rs" 45 12 45 17] _39 = ([#"../../src/gcd.rs" 45 12 45 17] (0 : uint64)));
    assert { [#"../../src/gcd.rs" 45 12 45 17] not _40 };
    goto BB9
  }
  BB9 {
    y_7 <- ([#"../../src/gcd.rs" 45 8 45 17] _38 % _39);
    _43 <- borrow_mut x_6;
    x_6 <-  ^ _43;
    _42 <- borrow_mut ( * _43);
    _43 <- { _43 with current = ( ^ _42) };
    _45 <- borrow_mut y_7;
    y_7 <-  ^ _45;
    _44 <- borrow_mut ( * _45);
    _45 <- { _45 with current = ( ^ _44) };
    _41 <- ([#"../../src/gcd.rs" 46 8 46 38] Swap0.swap _42 _44);
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _43 };
    assume { Resolve1.resolve _45 };
    _24 <- ();
    goto BB4
  }
  BB11 {
    _20 <- ();
    assert { [#"../../src/gcd.rs" 49 18 49 47] IsCommonDivisor0.is_common_divisor (UInt64.to_int x_6) (UInt64.to_int y_7) (UInt64.to_int y_7) };
    _49 <- ();
    _0 <- y_7;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotSandbox_UnionFind_UnionFind_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  type t_unionfind  =
    | C_UnionFind (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global))
    
  let function unionfind_parent (self : t_unionfind) : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_UnionFind a -> a
      end
end
module CreusotSandbox_UnionFind_UnionFindModel_Type
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  type t_unionfindmodel  =
    | C_UnionFindModel (Seq.seq usize)
    
  let function unionfindmodel_parent (self : t_unionfindmodel) : Seq.seq usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_UnionFindModel a -> a
      end
end
module Core_Num_Impl12_Max_Stub
  use mach.int.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl12_Max
  use mach.int.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= UInt64.to_int Max0.mAX'
end
module CreusotSandbox_UnionFind_Impl0_ShallowModel_Stub
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model [#"../../src/union_find.rs" 14 4 14 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
end
module CreusotSandbox_UnionFind_Impl0_ShallowModel_Interface
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  function shallow_model [#"../../src/union_find.rs" 14 4 14 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
end
module CreusotSandbox_UnionFind_Impl0_ShallowModel
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  function shallow_model [#"../../src/union_find.rs" 14 4 14 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../src/union_find.rs" 16 12 18 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (ShallowModel0.shallow_model (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent self))
  val shallow_model [#"../../src/union_find.rs" 14 4 14 50] (self : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = shallow_model self }
    
end
module CreusotSandbox_UnionFind_Impl1_Parent_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function parent [#"../../src/union_find.rs" 25 4 25 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
end
module CreusotSandbox_UnionFind_Impl1_Parent_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function parent [#"../../src/union_find.rs" 25 4 25 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
end
module CreusotSandbox_UnionFind_Impl1_Parent
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use seq.Seq
  use mach.int.UInt64
  function parent [#"../../src/union_find.rs" 25 4 25 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    
   =
    [#"../../src/union_find.rs" 26 8 26 39] UInt64.to_int (Seq.get (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) i)
  val parent [#"../../src/union_find.rs" 25 4 25 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : int
    ensures { result = parent self i }
    
end
module CreusotSandbox_UnionFind_Impl1_InRange_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate in_range [#"../../src/union_find.rs" 30 4 30 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
end
module CreusotSandbox_UnionFind_Impl1_InRange_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate in_range [#"../../src/union_find.rs" 30 4 30 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
end
module CreusotSandbox_UnionFind_Impl1_InRange
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use seq.Seq
  predicate in_range [#"../../src/union_find.rs" 30 4 30 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../src/union_find.rs" 31 20 31 51] 0 <= i /\ i < Seq.length (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self)
  val in_range [#"../../src/union_find.rs" 30 4 30 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = in_range self i }
    
end
module CreusotSandbox_UnionFind_Impl1_InvariantRange_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant_range [#"../../src/union_find.rs" 35 4 35 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_InvariantRange_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant_range [#"../../src/union_find.rs" 35 4 35 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_InvariantRange
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.Int
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  predicate invariant_range [#"../../src/union_find.rs" 35 4 35 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../src/union_find.rs" 36 8 39 9] forall i : int . InRange0.in_range self i -> InRange0.in_range self (Parent0.parent self i)
  val invariant_range [#"../../src/union_find.rs" 35 4 35 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_range self }
    
end
module CreusotSandbox_UnionFind_Impl1_IsRoot_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate is_root [#"../../src/union_find.rs" 43 4 43 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
end
module CreusotSandbox_UnionFind_Impl1_IsRoot_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate is_root [#"../../src/union_find.rs" 43 4 43 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
end
module CreusotSandbox_UnionFind_Impl1_IsRoot
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  predicate is_root [#"../../src/union_find.rs" 43 4 43 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int)
    
   =
    [#"../../src/union_find.rs" 44 20 44 59] InRange0.in_range self i /\ Parent0.parent self i = i
  val is_root [#"../../src/union_find.rs" 43 4 43 37] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) : bool
    ensures { result = is_root self i }
    
end
module CreusotSandbox_UnionFind_Impl1_Reach_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate reach [#"../../src/union_find.rs" 49 4 49 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
end
module CreusotSandbox_UnionFind_Impl1_Reach_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate reach [#"../../src/union_find.rs" 49 4 49 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
end
module CreusotSandbox_UnionFind_Impl1_Reach
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  predicate reach [#"../../src/union_find.rs" 49 4 49 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    
  val reach [#"../../src/union_find.rs" 49 4 49 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int) : bool
    ensures { result = reach self src dst len }
    
  axiom def : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . reach self src dst len = ([#"../../src/union_find.rs" 50 8 58 9] if len < 0 then
    false
  else
    if len = 0 then src = dst else src <> dst /\ reach self (Parent0.parent self src) dst (len - 1)
  )
  axiom reach_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, src : int, dst : int, len : int . true
end
module CreusotSandbox_UnionFind_Impl1_Reach_Impl
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  let rec ghost predicate reach [#"../../src/union_find.rs" 49 4 49 57] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (src : int) (dst : int) (len : int)
    variant {[#"../../src/union_find.rs" 48 14 48 17] len}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 50 8 58 9] if len < 0 then
      false
    else
      if pure {len = 0} then
        pure {src = dst}
      else
        pure {src <> dst} && (let b' = Parent0.parent self src in reach self b' dst (len - 1))
      
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Stub
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_intro [#"../../src/union_find.rs" 67 4 67 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Interface
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_intro [#"../../src/union_find.rs" 67 4 67 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_reach_intro_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 63 8 65 97] (forall src : int . Reach0.reach self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst -> Reach0.reach self (Parent0.parent self src) dst len -> Reach0.reach self src dst (len + 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIntro
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_intro [#"../../src/union_find.rs" 67 4 67 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 61 4 61 12] ()
  val lemma_reach_intro [#"../../src/union_find.rs" 67 4 67 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_intro self }
    
  axiom lemma_reach_intro_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 63 8 65 97] (forall src : int . Reach0.reach self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst -> Reach0.reach self (Parent0.parent self src) dst len -> Reach0.reach self src dst (len + 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Impl
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  let rec ghost function lemma_reach_intro [#"../../src/union_find.rs" 67 4 67 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 63 8 65 97] (forall src : int . Reach0.reach self src src 0) /\ (forall len : int . forall dst : int . forall src : int . src <> dst -> Reach0.reach self (Parent0.parent self src) dst len -> Reach0.reach self src dst (len + 1)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 61 4 61 12] ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Stub
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_iff [#"../../src/union_find.rs" 75 4 75 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Interface
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_iff [#"../../src/union_find.rs" 75 4 75 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_reach_iff_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 70 4 74 16] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ Reach0.reach self (Parent0.parent self src) dst (len - 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIff
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_iff [#"../../src/union_find.rs" 75 4 75 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 69 4 69 12] ()
  val lemma_reach_iff [#"../../src/union_find.rs" 75 4 75 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_iff self }
    
  axiom lemma_reach_iff_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 70 4 74 16] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ Reach0.reach self (Parent0.parent self src) dst (len - 1))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Impl
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  let rec ghost function lemma_reach_iff [#"../../src/union_find.rs" 75 4 75 29] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 70 4 74 16] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len = (src = dst /\ len = 0 \/ src <> dst /\ len > 0 /\ Reach0.reach self (Parent0.parent self src) dst (len - 1)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 69 4 69 12] ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Stub
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_nonneg [#"../../src/union_find.rs" 80 4 80 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Interface
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_nonneg [#"../../src/union_find.rs" 80 4 80 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_reach_nonneg_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 78 4 79 54] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len -> 0 <= len
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  function lemma_reach_nonneg [#"../../src/union_find.rs" 80 4 80 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 77 4 77 12] ()
  val lemma_reach_nonneg [#"../../src/union_find.rs" 80 4 80 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_reach_nonneg self }
    
  axiom lemma_reach_nonneg_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 78 4 79 54] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len -> 0 <= len
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Impl
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  let rec ghost function lemma_reach_nonneg [#"../../src/union_find.rs" 80 4 80 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 78 4 79 54] forall len : int . forall dst : int . forall src : int . Reach0.reach self src dst len -> 0 <= len }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 77 4 77 12] ()
end
module CreusotSandbox_UnionFind_Impl1_ReachRefl_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate reach_refl [#"../../src/union_find.rs" 84 4 84 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_ReachRefl_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate reach_refl [#"../../src/union_find.rs" 84 4 84 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
  axiom reach_refl_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 83 14 83 28] reach_refl self = true
end
module CreusotSandbox_UnionFind_Impl1_ReachRefl
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.Int
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  predicate reach_refl [#"../../src/union_find.rs" 84 4 84 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../src/union_find.rs" 85 8 89 9] forall i : int . InRange0.in_range self i -> Reach0.reach self i i 0
  val reach_refl [#"../../src/union_find.rs" 84 4 84 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = reach_refl self }
    
  axiom reach_refl_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 83 14 83 28] reach_refl self = true
end
module CreusotSandbox_UnionFind_Impl1_ReachRefl_Impl
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  let rec ghost predicate reach_refl [#"../../src/union_find.rs" 84 4 84 32] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    ensures { [#"../../src/union_find.rs" 83 14 83 28] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 85 8 89 9] pure {forall i : int . InRange0.in_range self i -> Reach0.reach self i i 0}
end
module CreusotSandbox_UnionFind_Impl1_Belong_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate belong [#"../../src/union_find.rs" 93 4 93 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
end
module CreusotSandbox_UnionFind_Impl1_Belong_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate belong [#"../../src/union_find.rs" 93 4 93 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
end
module CreusotSandbox_UnionFind_Impl1_Belong
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  predicate belong [#"../../src/union_find.rs" 93 4 93 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int)
    
   =
    [#"../../src/union_find.rs" 94 8 97 9] IsRoot0.is_root self root /\ (exists len : int . Reach0.reach self i root len)
  val belong [#"../../src/union_find.rs" 93 4 93 47] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (root : int) : bool
    ensures { result = belong self i root }
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Stub
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  function lemma_belong_unique [#"../../src/union_find.rs" 104 4 104 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Interface
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  function lemma_belong_unique [#"../../src/union_find.rs" 104 4 104 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_belong_unique_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 101 4 103 16] forall r2 : int . forall r1 : int . forall i : int . Belong0.belong self i r1 -> Belong0.belong self i r2 -> r1 = r2
end
module CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Stub as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  function lemma_belong_unique [#"../../src/union_find.rs" 104 4 104 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 105 8 105 30] let _ = LemmaReachIff0.lemma_reach_iff self in ()
  val lemma_belong_unique [#"../../src/union_find.rs" 104 4 104 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_belong_unique self }
    
  axiom lemma_belong_unique_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 101 4 103 16] forall r2 : int . forall r1 : int . forall i : int . Belong0.belong self i r1 -> Belong0.belong self i r2 -> r1 = r2
end
module CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Impl
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  let rec ghost function lemma_belong_unique [#"../../src/union_find.rs" 104 4 104 33] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 101 4 103 16] forall r2 : int . forall r1 : int . forall i : int . Belong0.belong self i r1 -> Belong0.belong self i r2 -> r1 = r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 105 8 105 30] let _ = LemmaReachIff0.lemma_reach_iff self in ()
end
module CreusotSandbox_UnionFind_Impl1_InvariantBelong_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant_belong [#"../../src/union_find.rs" 109 4 109 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_InvariantBelong_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant_belong [#"../../src/union_find.rs" 109 4 109 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_InvariantBelong
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.Int
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  predicate invariant_belong [#"../../src/union_find.rs" 109 4 109 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../src/union_find.rs" 110 8 112 9] forall i : int . InRange0.in_range self i -> (exists root : int . Belong0.belong self i root)
  val invariant_belong [#"../../src/union_find.rs" 109 4 109 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant_belong self }
    
end
module CreusotSandbox_UnionFind_Impl1_Invariant_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant' [#"../../src/union_find.rs" 116 4 116 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_Invariant_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate invariant' [#"../../src/union_find.rs" 116 4 116 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
end
module CreusotSandbox_UnionFind_Impl1_Invariant
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong_Stub as InvariantBelong0
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange_Stub as InvariantRange0
  predicate invariant' [#"../../src/union_find.rs" 116 4 116 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel)
    
   =
    [#"../../src/union_find.rs" 117 8 117 57] InvariantRange0.invariant_range self /\ InvariantBelong0.invariant_belong self
  val invariant' [#"../../src/union_find.rs" 116 4 116 31] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = invariant' self }
    
end
module CreusotSandbox_UnionFind_Impl1_SameSet_Stub
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate same_set [#"../../src/union_find.rs" 121 4 121 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int)
    
end
module CreusotSandbox_UnionFind_Impl1_SameSet_Interface
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  predicate same_set [#"../../src/union_find.rs" 121 4 121 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int)
    
end
module CreusotSandbox_UnionFind_Impl1_SameSet
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  predicate same_set [#"../../src/union_find.rs" 121 4 121 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int)
    
   =
    [#"../../src/union_find.rs" 122 8 125 9] InRange0.in_range self i /\ InRange0.in_range self j /\ (exists root : int . Belong0.belong self i root /\ Belong0.belong self j root)
  val same_set [#"../../src/union_find.rs" 121 4 121 46] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : int) (j : int) : bool
    ensures { result = same_set self i j }
    
end
module CreusotSandbox_UnionFind_Impl1_RootBelongRefl_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function root_belong_refl [#"../../src/union_find.rs" 130 4 130 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
end
module CreusotSandbox_UnionFind_Impl1_RootBelongRefl_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function root_belong_refl [#"../../src/union_find.rs" 130 4 130 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
  axiom root_belong_refl_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 129 14 129 28] root_belong_refl self = true
end
module CreusotSandbox_UnionFind_Impl1_RootBelongRefl
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.Int
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  function root_belong_refl [#"../../src/union_find.rs" 130 4 130 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../src/union_find.rs" 131 8 133 9] forall i : int . IsRoot0.is_root self i -> Belong0.belong self i i
  val root_belong_refl [#"../../src/union_find.rs" 130 4 130 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = root_belong_refl self }
    
  axiom root_belong_refl_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 129 14 129 28] root_belong_refl self = true
end
module CreusotSandbox_UnionFind_Impl1_RootBelongRefl_Impl
  use prelude.Borrow
  use mach.int.Int
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  let rec ghost function root_belong_refl [#"../../src/union_find.rs" 130 4 130 38] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { [#"../../src/union_find.rs" 129 14 129 28] result = true }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 131 8 133 9] pure {forall i : int . IsRoot0.is_root self i -> Belong0.belong self i i}
end
module CreusotSandbox_UnionFind_Impl1_Equal_Stub
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function equal [#"../../src/union_find.rs" 137 4 137 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
end
module CreusotSandbox_UnionFind_Impl1_Equal_Interface
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function equal [#"../../src/union_find.rs" 137 4 137 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
end
module CreusotSandbox_UnionFind_Impl1_Equal
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.Int
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function equal [#"../../src/union_find.rs" 137 4 137 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    
   =
    [#"../../src/union_find.rs" 138 8 142 9] Invariant0.invariant' self /\ Invariant0.invariant' another /\ (forall i : int . InRange0.in_range self i = InRange0.in_range another i /\ (forall g : int . forall i : int . InRange0.in_range self i -> Belong0.belong self i g = Belong0.belong another i g))
  val equal [#"../../src/union_find.rs" 137 4 137 42] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (another : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : bool
    ensures { result = equal self another }
    
end
module CreusotSandbox_UnionFind_Impl1_Update_Stub
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function update [#"../../src/union_find.rs" 146 4 146 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
end
module CreusotSandbox_UnionFind_Impl1_Update_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  function update [#"../../src/union_find.rs" 146 4 146 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
end
module CreusotSandbox_UnionFind_Impl1_Update
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use mach.int.UInt64
  use seq.Seq
  function update [#"../../src/union_find.rs" 146 4 146 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    
   =
    [#"../../src/union_find.rs" 148 12 150 13] CreusotSandbox_UnionFind_UnionFindModel_Type.C_UnionFindModel (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent self) (UInt64.to_int i) r)
  val update [#"../../src/union_find.rs" 146 4 146 48] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
    ensures { result = update self i r }
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Stub
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_eq [#"../../src/union_find.rs" 157 4 157 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_eq [#"../../src/union_find.rs" 157 4 157 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_update_parent_eq_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 155 4 156 97] forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> Parent0.parent (Update0.update self i r) (UInt64.to_int i) = UInt64.to_int r
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_eq [#"../../src/union_find.rs" 157 4 157 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 154 4 154 12] ()
  val lemma_update_parent_eq [#"../../src/union_find.rs" 157 4 157 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_eq self }
    
  axiom lemma_update_parent_eq_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 155 4 156 97] forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> Parent0.parent (Update0.update self i r) (UInt64.to_int i) = UInt64.to_int r
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Impl
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  let rec ghost function lemma_update_parent_eq [#"../../src/union_find.rs" 157 4 157 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 155 4 156 97] forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> Parent0.parent (Update0.update self i r) (UInt64.to_int i) = UInt64.to_int r }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 154 4 154 12] ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Stub
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_ne [#"../../src/union_find.rs" 164 4 164 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_ne [#"../../src/union_find.rs" 164 4 164 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_update_parent_ne_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 160 4 163 57] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range self j -> UInt64.to_int i <> j -> Parent0.parent (Update0.update self i r) j = Parent0.parent self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_parent_ne [#"../../src/union_find.rs" 164 4 164 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 159 4 159 12] ()
  val lemma_update_parent_ne [#"../../src/union_find.rs" 164 4 164 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_parent_ne self }
    
  axiom lemma_update_parent_ne_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 160 4 163 57] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range self j -> UInt64.to_int i <> j -> Parent0.parent (Update0.update self i r) j = Parent0.parent self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Impl
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  let rec ghost function lemma_update_parent_ne [#"../../src/union_find.rs" 164 4 164 36] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 160 4 163 57] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range self j -> UInt64.to_int i <> j -> Parent0.parent (Update0.update self i r) j = Parent0.parent self j }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 159 4 159 12] ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Stub
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_in_range [#"../../src/union_find.rs" 170 4 170 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Interface
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_in_range [#"../../src/union_find.rs" 170 4 170 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_update_in_range_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 167 4 169 82] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range (Update0.update self i r) j = InRange0.in_range self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  function lemma_update_in_range [#"../../src/union_find.rs" 170 4 170 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 166 4 166 12] ()
  val lemma_update_in_range [#"../../src/union_find.rs" 170 4 170 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { result = lemma_update_in_range self }
    
  axiom lemma_update_in_range_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . [#"../../src/union_find.rs" 167 4 169 82] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range (Update0.update self i r) j = InRange0.in_range self j
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Impl
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  let rec ghost function lemma_update_in_range [#"../../src/union_find.rs" 170 4 170 34] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    ensures { [#"../../src/union_find.rs" 167 4 169 82] forall j : int . forall r : usize . forall i : usize . InRange0.in_range self (UInt64.to_int i) -> InRange0.in_range (Update0.update self i r) j = InRange0.in_range self j }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 166 4 166 12] ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Stub
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_reachable_trans [#"../../src/union_find.rs" 179 4 179 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Interface
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_reachable_trans [#"../../src/union_find.rs" 179 4 179 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
  axiom lemma_reachable_trans_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . ([#"../../src/union_find.rs" 174 16 174 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 175 4 178 54] forall k : int . forall j : int . forall i : int . (exists n : int . Reach0.reach self i j n) -> (exists n : int . Reach0.reach self j k n) -> (exists n : int . Reach0.reach self i k n))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Stub as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Stub as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Stub as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  function lemma_reachable_trans [#"../../src/union_find.rs" 179 4 179 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    
   =
    [#"../../src/union_find.rs" 180 8 180 32] let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
  val lemma_reachable_trans [#"../../src/union_find.rs" 179 4 179 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    requires {[#"../../src/union_find.rs" 174 16 174 32] Invariant0.invariant' self}
    ensures { result = lemma_reachable_trans self }
    
  axiom lemma_reachable_trans_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel . ([#"../../src/union_find.rs" 174 16 174 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 175 4 178 54] forall k : int . forall j : int . forall i : int . (exists n : int . Reach0.reach self i j n) -> (exists n : int . Reach0.reach self j k n) -> (exists n : int . Reach0.reach self i k n))
end
module CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Impl
  use mach.int.Int
  use prelude.Borrow
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  let rec ghost function lemma_reachable_trans [#"../../src/union_find.rs" 179 4 179 35] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) : ()
    requires {[#"../../src/union_find.rs" 174 16 174 32] Invariant0.invariant' self}
    ensures { [#"../../src/union_find.rs" 175 4 178 54] forall k : int . forall j : int . forall i : int . (exists n : int . Reach0.reach self i j n) -> (exists n : int . Reach0.reach self j k n) -> (exists n : int . Reach0.reach self i k n) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 180 8 180 32] let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_updated [#"../../src/union_find.rs" 193 4 193 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_updated [#"../../src/union_find.rs" 193 4 193 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  axiom lemma_update_belong_updated_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 187 16 187 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 188 16 188 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 189 16 189 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 190 16 190 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 191 4 192 94] forall n : int . forall j : int . InRange0.in_range self j -> Reach0.reach self j (UInt64.to_int i) n -> Belong0.belong (Update0.update self i r) j (UInt64.to_int r))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Stub as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Stub as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Stub as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Stub as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Stub as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Stub as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  function lemma_update_belong_updated [#"../../src/union_find.rs" 193 4 193 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../src/union_find.rs" 194 8 194 37] let _ = LemmaUpdateParentEq0.lemma_update_parent_eq self in let _ = LemmaUpdateParentNe0.lemma_update_parent_ne self in let _ = LemmaUpdateInRange0.lemma_update_in_range self in let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
  val lemma_update_belong_updated [#"../../src/union_find.rs" 193 4 193 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 187 16 187 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 188 16 188 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 189 16 189 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 190 16 190 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { result = lemma_update_belong_updated self i r }
    
  axiom lemma_update_belong_updated_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 187 16 187 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 188 16 188 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 189 16 189 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 190 16 190 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 191 4 192 94] forall n : int . forall j : int . InRange0.in_range self j -> Reach0.reach self j (UInt64.to_int i) n -> Belong0.belong (Update0.update self i r) j (UInt64.to_int r))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  let rec ghost function lemma_update_belong_updated [#"../../src/union_find.rs" 193 4 193 61] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 187 16 187 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 188 16 188 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 189 16 189 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 190 16 190 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 191 4 192 94] forall n : int . forall j : int . InRange0.in_range self j -> Reach0.reach self j (UInt64.to_int i) n -> Belong0.belong (Update0.update self i r) j (UInt64.to_int r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 194 8 194 37] let _ = LemmaUpdateParentEq0.lemma_update_parent_eq self in let _ = LemmaUpdateParentNe0.lemma_update_parent_ne self in let _ = LemmaUpdateInRange0.lemma_update_in_range self in let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_preserved [#"../../src/union_find.rs" 212 4 212 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_preserved [#"../../src/union_find.rs" 212 4 212 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  axiom lemma_update_belong_preserved_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 204 16 204 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 205 16 205 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 206 16 206 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 207 16 207 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 208 4 211 68] forall g : int . forall j : int . InRange0.in_range self j -> not (exists n : int . Reach0.reach self j (UInt64.to_int i) n) -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g)
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl1_Parent_Stub as Parent0
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg_Stub as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff_Stub as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro_Stub as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange_Stub as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe_Stub as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq_Stub as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  function lemma_update_belong_preserved [#"../../src/union_find.rs" 212 4 212 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../src/union_find.rs" 213 8 213 37] let _ = LemmaUpdateParentEq0.lemma_update_parent_eq self in let _ = LemmaUpdateParentNe0.lemma_update_parent_ne self in let _ = LemmaUpdateInRange0.lemma_update_in_range self in let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
  val lemma_update_belong_preserved [#"../../src/union_find.rs" 212 4 212 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 204 16 204 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 205 16 205 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 206 16 206 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 207 16 207 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { result = lemma_update_belong_preserved self i r }
    
  axiom lemma_update_belong_preserved_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 204 16 204 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 205 16 205 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 206 16 206 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 207 16 207 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 208 4 211 68] forall g : int . forall j : int . InRange0.in_range self j -> not (exists n : int . Reach0.reach self j (UInt64.to_int i) n) -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g)
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  let rec ghost function lemma_update_belong_preserved [#"../../src/union_find.rs" 212 4 212 63] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 204 16 204 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 205 16 205 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 206 16 206 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 207 16 207 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 208 4 211 68] forall g : int . forall j : int . InRange0.in_range self j -> not (exists n : int . Reach0.reach self j (UInt64.to_int i) n) -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 213 8 213 37] let _ = LemmaUpdateParentEq0.lemma_update_parent_eq self in let _ = LemmaUpdateParentNe0.lemma_update_parent_ne self in let _ = LemmaUpdateInRange0.lemma_update_in_range self in let _ = LemmaReachIntro0.lemma_reach_intro self in let _ = LemmaReachIff0.lemma_reach_iff self in let _ = LemmaReachNonneg0.lemma_reach_nonneg self in ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_shortcut [#"../../src/union_find.rs" 234 4 234 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_shortcut [#"../../src/union_find.rs" 234 4 234 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  axiom lemma_update_belong_shortcut_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 223 16 223 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 224 16 224 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 225 16 225 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 226 16 226 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 233 15 233 44] Invariant0.invariant' (Update0.update self i r)) && ([#"../../src/union_find.rs" 232 4 232 70] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> Equal0.equal (Update0.update self i r) self) && ([#"../../src/union_find.rs" 227 4 231 68] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Stub as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Stub as LemmaReachableTrans0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Stub as LemmaUpdateBelongPreserved0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Stub as LemmaUpdateBelongUpdated0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    axiom .
  function lemma_update_belong_shortcut [#"../../src/union_find.rs" 234 4 234 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../src/union_find.rs" 235 8 235 46] let _ = LemmaUpdateBelongUpdated0.lemma_update_belong_updated self i r in let _ = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved self i r in let _ = LemmaReachableTrans0.lemma_reachable_trans self in let _ = LemmaBelongUnique0.lemma_belong_unique self in ()
  val lemma_update_belong_shortcut [#"../../src/union_find.rs" 234 4 234 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 223 16 223 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 224 16 224 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 225 16 225 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 226 16 226 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { result = lemma_update_belong_shortcut self i r }
    
  axiom lemma_update_belong_shortcut_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 223 16 223 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 224 16 224 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 225 16 225 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 226 16 226 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 233 15 233 44] Invariant0.invariant' (Update0.update self i r)) && ([#"../../src/union_find.rs" 232 4 232 70] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> Equal0.equal (Update0.update self i r) self) && ([#"../../src/union_find.rs" 227 4 231 68] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans as LemmaReachableTrans0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Reach0.reach = Reach0.reach,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved as LemmaUpdateBelongPreserved0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated as LemmaUpdateBelongUpdated0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Equal as Equal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  let rec ghost function lemma_update_belong_shortcut [#"../../src/union_find.rs" 234 4 234 62] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 223 16 223 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 224 16 224 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 225 16 225 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 226 16 226 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 227 4 231 68] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = Belong0.belong self j g) }
    ensures { [#"../../src/union_find.rs" 232 4 232 70] Belong0.belong self (UInt64.to_int i) (UInt64.to_int r) -> Equal0.equal (Update0.update self i r) self }
    ensures { [#"../../src/union_find.rs" 233 15 233 44] Invariant0.invariant' (Update0.update self i r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 235 8 235 46] let _ = LemmaUpdateBelongUpdated0.lemma_update_belong_updated self i r in let _ = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved self i r in let _ = LemmaReachableTrans0.lemma_reachable_trans self in let _ = LemmaBelongUnique0.lemma_belong_unique self in ()
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify_Stub
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_unify [#"../../src/union_find.rs" 256 4 256 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  function lemma_update_belong_unify [#"../../src/union_find.rs" 256 4 256 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
  axiom lemma_update_belong_unify_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 242 16 242 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 243 16 243 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 244 16 244 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 245 16 245 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 255 15 255 44] Invariant0.invariant' (Update0.update self i r)) && ([#"../../src/union_find.rs" 246 4 254 15] IsRoot0.is_root self (UInt64.to_int i) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = (if Belong0.belong self j (UInt64.to_int i) then
    g = UInt64.to_int r
  else
    Belong0.belong self j g
  )))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl1_Reach_Stub as Reach0 with
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique_Stub as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans_Stub as LemmaReachableTrans0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved_Stub as LemmaUpdateBelongPreserved0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated_Stub as LemmaUpdateBelongUpdated0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    axiom .
  function lemma_update_belong_unify [#"../../src/union_find.rs" 256 4 256 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    
   =
    [#"../../src/union_find.rs" 257 8 257 46] let _ = LemmaUpdateBelongUpdated0.lemma_update_belong_updated self i r in let _ = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved self i r in let _ = LemmaReachableTrans0.lemma_reachable_trans self in let _ = LemmaBelongUnique0.lemma_belong_unique self in ()
  val lemma_update_belong_unify [#"../../src/union_find.rs" 256 4 256 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 242 16 242 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 243 16 243 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 244 16 244 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 245 16 245 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { result = lemma_update_belong_unify self i r }
    
  axiom lemma_update_belong_unify_spec : forall self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel, i : usize, r : usize . ([#"../../src/union_find.rs" 242 16 242 32] Invariant0.invariant' self) -> ([#"../../src/union_find.rs" 243 16 243 33] InRange0.in_range self (UInt64.to_int i)) -> ([#"../../src/union_find.rs" 244 16 244 33] InRange0.in_range self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 245 16 245 32] IsRoot0.is_root self (UInt64.to_int r)) -> ([#"../../src/union_find.rs" 255 15 255 44] Invariant0.invariant' (Update0.update self i r)) && ([#"../../src/union_find.rs" 246 4 254 15] IsRoot0.is_root self (UInt64.to_int i) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = (if Belong0.belong self j (UInt64.to_int i) then
    g = UInt64.to_int r
  else
    Belong0.belong self j g
  )))
end
module CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify_Impl
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Borrow
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans as LemmaReachableTrans0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Reach0.reach = Reach0.reach,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved as LemmaUpdateBelongPreserved0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated as LemmaUpdateBelongUpdated0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  let rec ghost function lemma_update_belong_unify [#"../../src/union_find.rs" 256 4 256 59] (self : CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 242 16 242 32] Invariant0.invariant' self}
    requires {[#"../../src/union_find.rs" 243 16 243 33] InRange0.in_range self (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 244 16 244 33] InRange0.in_range self (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 245 16 245 32] IsRoot0.is_root self (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 246 4 254 15] IsRoot0.is_root self (UInt64.to_int i) -> (forall g : int . forall j : int . InRange0.in_range self j -> Belong0.belong (Update0.update self i r) j g = (if Belong0.belong self j (UInt64.to_int i) then
      g = UInt64.to_int r
    else
      Belong0.belong self j g
    )) }
    ensures { [#"../../src/union_find.rs" 255 15 255 44] Invariant0.invariant' (Update0.update self i r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../../src/union_find.rs" 257 8 257 46] let _ = LemmaUpdateBelongUpdated0.lemma_update_belong_updated self i r in let _ = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved self i r in let _ = LemmaReachableTrans0.lemma_reachable_trans self in let _ = LemmaBelongUnique0.lemma_belong_unique self in ()
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self)
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Interface
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
end
module CreusotContracts_Std1_Iter_FromIterator_FromIterPost
  type self
  type a
  use seq.Seq
  predicate from_iter_post (prod : Seq.seq a) (res : self)
  val from_iter_post (prod : Seq.seq a) (res : self) : bool
    ensures { result = from_iter_post prod res }
    
end
module Core_Iter_Traits_Iterator_Iterator_Collect_Interface
  type self
  type b
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  clone CreusotContracts_Std1_Iter_FromIterator_FromIterPost_Stub as FromIterPost0 with
    type self = b,
    type a = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = self
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  val collect (self : self) : b
    requires {Invariant0.invariant' self}
    ensures { exists prod : Seq.seq Item0.item . exists done_ : borrowed self . Resolve0.resolve ( ^ done_) /\ Completed0.completed done_ /\ Produces0.produces self prod ( * done_) /\ FromIterPost0.from_iter_post prod result }
    
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Stub
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant_Interface
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx)
end
module CreusotContracts_Std1_Ops_Impl3_Invariant
  type idx
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate invariant' (self : Core_Ops_Range_Range_Type.t_range idx) =
    true
  val invariant' (self : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = invariant' self }
    
end
module Core_Iter_Range_Impl3_Item_Type
  type a
  type item  =
    a
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  use mach.int.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Vec_Impl8_FromIterPost_Stub
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl8_FromIterPost_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl8_FromIterPost
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    prod = ShallowModel0.shallow_model res
  val from_iter_post (prod : Seq.seq t) (res : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = from_iter_post prod res }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl3_Invariant_Stub as Invariant0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {Invariant0.invariant' a}
    requires {Invariant0.invariant' b}
    requires {Invariant0.invariant' c}
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . Invariant0.invariant' a -> Invariant0.invariant' b -> Invariant0.invariant' c -> Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Stub
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel_Interface
  use mach.int.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl18_DeepModel
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  function deep_model (self : usize) : int =
    [#"../../src/union_find.rs" 339 36 340 17] UInt64.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotSandbox_UnionFind_Impl2_New_Interface
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel_Stub as ShallowModel0
  val new [#"../../src/union_find.rs" 267 4 267 37] (n : usize) : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
    ensures { [#"../../src/union_find.rs" 265 14 265 35] Invariant0.invariant' (ShallowModel0.shallow_model result) }
    ensures { [#"../../src/union_find.rs" 266 4 266 81] forall i : int . InRange0.in_range (ShallowModel0.shallow_model result) i -> Belong0.belong (ShallowModel0.shallow_model result) i i }
    
end
module CreusotSandbox_UnionFind_Impl2_New
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl18_DeepModel as DeepModel0
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Ops_Impl3_Invariant as Invariant1 with
    type idx = usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl0 with
    type idx = usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Produces0.produces = Produces0.produces,
    axiom .
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone Core_Num_Impl12_Max as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Vec_Impl8_FromIterPost as FromIterPost0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve1.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone Core_Iter_Range_Impl3_Item_Type as Item0 with
    type a = usize
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_ReachRefl as ReachRefl0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone Core_Iter_Traits_Iterator_Iterator_Collect_Interface as Collect0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    type b = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Resolve0.resolve = Resolve0.resolve,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces,
    predicate FromIterPost0.from_iter_post = FromIterPost0.from_iter_post
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel as ShallowModel0 with
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg new [#"../../src/union_find.rs" 267 4 267 37] [@cfg:stackify] [@cfg:subregion_analysis] (n : usize) : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
    ensures { [#"../../src/union_find.rs" 265 14 265 35] Invariant0.invariant' (ShallowModel0.shallow_model result) }
    ensures { [#"../../src/union_find.rs" 266 4 266 81] forall i : int . InRange0.in_range (ShallowModel0.shallow_model result) i -> Belong0.belong (ShallowModel0.shallow_model result) i i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
  var n_1 : usize;
  var uf_4 : CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
  var _5 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _6 : Core_Ops_Range_Range_Type.t_range usize;
  var _7 : usize;
  var _8 : ();
  var _10 : ();
  var _12 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    _7 <- n_1;
    _6 <- Core_Ops_Range_Range_Type.C_Range ([#"../../src/union_find.rs" 269 21 269 22] (0 : usize)) _7;
    _5 <- ([#"../../src/union_find.rs" 269 20 269 36] Collect0.collect _6);
    goto BB1
  }
  BB1 {
    uf_4 <- CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind _5;
    goto BB2
  }
  BB2 {
    assert { [#"../../src/union_find.rs" 271 22 271 40] ReachRefl0.reach_refl (ShallowModel0.shallow_model uf_4) };
    goto BB3
  }
  BB3 {
    _8 <- ();
    assert { [#"../../src/union_find.rs" 272 8 272 79] forall i : int . InRange0.in_range (ShallowModel0.shallow_model uf_4) i -> IsRoot0.is_root (ShallowModel0.shallow_model uf_4) i };
    goto BB4
  }
  BB4 {
    _10 <- ();
    assert { [#"../../src/union_find.rs" 274 22 274 46] InvariantBelong0.invariant_belong (ShallowModel0.shallow_model uf_4) };
    goto BB5
  }
  BB5 {
    _12 <- ();
    _0 <- uf_4;
    uf_4 <- any CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind;
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  type shallowModelTy  =
    CreusotSandbox_UnionFind_UnionFindModel_Type.t_unionfindmodel
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val new (_1' : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl15_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Num_Impl12_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPre_Stub
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPre_Interface
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a)
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPre
  type t
  type a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) =
    true
  val into_iter_pre (self : Alloc_Vec_Vec_Type.t_vec t a) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl5_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl5_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl5_ShallowModel
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPost_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPost_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl2_IntoIterPost
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
   =
    ShallowModel0.shallow_model self = ShallowModel1.shallow_model res
  val into_iter_post (self : Alloc_Vec_Vec_Type.t_vec t a) (res : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = into_iter_post self res }
    
end
module Alloc_Vec_Impl18_IntoIter_Type
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  type intoIter  =
    Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
end
module Alloc_Vec_Impl18_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone Alloc_Vec_Impl18_IntoIter_Type as IntoIter1 with
    type t = t,
    type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl2_IntoIterPost_Stub as IntoIterPost0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl2_IntoIterPre_Stub as IntoIterPre0 with
    type t = t,
    type a = a
  val into_iter (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    requires {IntoIterPre0.into_iter_pre self}
    ensures { IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Vec_Impl6_Invariant_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl6_Invariant_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl6_Invariant
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    true
  val invariant' (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = invariant' self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl5_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl7_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl7_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl7_Completed
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    Resolve0.resolve self /\ ShallowModel0.shallow_model self = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl7_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl7_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl7_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    ShallowModel0.shallow_model self = Seq.(++) visited (ShallowModel0.shallow_model rhs)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module Alloc_Vec_IntoIter_Impl5_Item_Type
  type t
  type a
  type item  =
    t
end
module Alloc_Vec_IntoIter_Impl5_Next_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item1 with
    type t = t,
    type a = a
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  clone CreusotContracts_Std1_Vec_Impl7_Completed_Stub as Completed0 with
    type t = t,
    type a = a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  clone CreusotContracts_Std1_Vec_Impl6_Invariant_Stub as Invariant0 with
    type t = t,
    type a = a
  val next (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : Core_Option_Option_Type.t_option t
    requires {Invariant0.invariant' ( * self)}
    ensures { Invariant0.invariant' ( ^ self) }
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl16_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with
    type t = t,
    type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : int . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module CreusotContracts_Model_Impl3_ShallowModelTy_Type
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  type shallowModelTy  =
    ShallowModelTy0.shallowModelTy
end
module CreusotSandbox_UnionFind_Impl2_Update_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl1_Update_Stub as Update0
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel_Stub as ShallowModel1
  clone CreusotSandbox_UnionFind_Impl1_IsRoot_Stub as IsRoot0
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val update [#"../../src/union_find.rs" 355 4 355 44] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 338 15 338 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 339 15 339 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 340 15 340 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 341 15 341 34] IsRoot0.is_root (ShallowModel0.shallow_model self) (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 342 14 342 44] ShallowModel1.shallow_model ( ^ self) = Update0.update (ShallowModel0.shallow_model self) i r }
    ensures { [#"../../src/union_find.rs" 343 14 343 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 344 4 344 76] forall j : int . InRange0.in_range (ShallowModel1.shallow_model ( ^ self)) j = InRange0.in_range (ShallowModel0.shallow_model self) j }
    ensures { [#"../../src/union_find.rs" 345 4 345 64] Belong0.belong (ShallowModel0.shallow_model self) (UInt64.to_int i) (UInt64.to_int r) -> Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) }
    ensures { [#"../../src/union_find.rs" 346 4 354 15] IsRoot0.is_root (ShallowModel0.shallow_model self) (UInt64.to_int i) -> (forall g : int . forall j : int . InRange0.in_range (ShallowModel0.shallow_model self) j -> Belong0.belong (ShallowModel1.shallow_model ( ^ self)) j g = (if Belong0.belong (ShallowModel0.shallow_model self) j (UInt64.to_int i) then
      g = UInt64.to_int r
    else
      Belong0.belong (ShallowModel0.shallow_model self) j g
    )) }
    
end
module CreusotSandbox_UnionFind_Impl2_Update
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use mach.int.UInt64
  use seq.Seq
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachNonneg as LemmaReachNonneg0 with
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIntro as LemmaReachIntro0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Update as Update0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateInRange as LemmaUpdateInRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentNe as LemmaUpdateParentNe0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateParentEq as LemmaUpdateParentEq0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Update0.update = Update0.update,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachableTrans as LemmaReachableTrans0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Reach0.reach = Reach0.reach,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongPreserved as LemmaUpdateBelongPreserved0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUpdated as LemmaUpdateBelongUpdated0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateParentEq0.lemma_update_parent_eq = LemmaUpdateParentEq0.lemma_update_parent_eq,
    function LemmaUpdateParentNe0.lemma_update_parent_ne = LemmaUpdateParentNe0.lemma_update_parent_ne,
    function LemmaUpdateInRange0.lemma_update_in_range = LemmaUpdateInRange0.lemma_update_in_range,
    function LemmaReachIntro0.lemma_reach_intro = LemmaReachIntro0.lemma_reach_intro,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    function LemmaReachNonneg0.lemma_reach_nonneg = LemmaReachNonneg0.lemma_reach_nonneg,
    function Parent0.parent = Parent0.parent,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Model_Impl3_ShallowModelTy_Type as ShallowModelTy3 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = usize
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongUnify as LemmaUpdateBelongUnify0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    function Update0.update = Update0.update,
    predicate Belong0.belong = Belong0.belong,
    function LemmaUpdateBelongUpdated0.lemma_update_belong_updated = LemmaUpdateBelongUpdated0.lemma_update_belong_updated,
    function LemmaUpdateBelongPreserved0.lemma_update_belong_preserved = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved,
    function LemmaReachableTrans0.lemma_reachable_trans = LemmaReachableTrans0.lemma_reachable_trans,
    function LemmaBelongUnique0.lemma_belong_unique = LemmaBelongUnique0.lemma_belong_unique,
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Equal as Equal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_LemmaUpdateBelongShortcut as LemmaUpdateBelongShortcut0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Belong0.belong = Belong0.belong,
    function Update0.update = Update0.update,
    function Equal0.equal = Equal0.equal,
    function LemmaUpdateBelongUpdated0.lemma_update_belong_updated = LemmaUpdateBelongUpdated0.lemma_update_belong_updated,
    function LemmaUpdateBelongPreserved0.lemma_update_belong_preserved = LemmaUpdateBelongPreserved0.lemma_update_belong_preserved,
    function LemmaReachableTrans0.lemma_reachable_trans = LemmaReachableTrans0.lemma_reachable_trans,
    function LemmaBelongUnique0.lemma_belong_unique = LemmaBelongUnique0.lemma_belong_unique,
    predicate Reach0.reach = Reach0.reach,
    axiom .
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = usize
  clone Alloc_Vec_Impl16_IndexMut_Interface as IndexMut0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    type Output0.output = Output0.output,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
  let rec cfg update [#"../../src/union_find.rs" 355 4 355 44] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (i : usize) (r : usize) : ()
    requires {[#"../../src/union_find.rs" 338 15 338 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 339 15 339 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int i)}
    requires {[#"../../src/union_find.rs" 340 15 340 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int r)}
    requires {[#"../../src/union_find.rs" 341 15 341 34] IsRoot0.is_root (ShallowModel0.shallow_model self) (UInt64.to_int r)}
    ensures { [#"../../src/union_find.rs" 342 14 342 44] ShallowModel1.shallow_model ( ^ self) = Update0.update (ShallowModel0.shallow_model self) i r }
    ensures { [#"../../src/union_find.rs" 343 14 343 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 344 4 344 76] forall j : int . InRange0.in_range (ShallowModel1.shallow_model ( ^ self)) j = InRange0.in_range (ShallowModel0.shallow_model self) j }
    ensures { [#"../../src/union_find.rs" 345 4 345 64] Belong0.belong (ShallowModel0.shallow_model self) (UInt64.to_int i) (UInt64.to_int r) -> Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) }
    ensures { [#"../../src/union_find.rs" 346 4 354 15] IsRoot0.is_root (ShallowModel0.shallow_model self) (UInt64.to_int i) -> (forall g : int . forall j : int . InRange0.in_range (ShallowModel0.shallow_model self) j -> Belong0.belong (ShallowModel1.shallow_model ( ^ self)) j g = (if Belong0.belong (ShallowModel0.shallow_model self) j (UInt64.to_int i) then
      g = UInt64.to_int r
    else
      Belong0.belong (ShallowModel0.shallow_model self) j g
    )) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var i_2 : usize;
  var r_3 : usize;
  var _old_13 : Ghost.ghost_ty (borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind));
  var _15 : ();
  var _16 : usize;
  var _17 : borrowed usize;
  var _18 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _19 : usize;
  var _20 : ();
  var _22 : ();
  var _24 : ();
  var _26 : Ghost.ghost_ty ();
  var _28 : ();
  var _29 : Ghost.ghost_ty ();
  var _31 : ();
  var _32 : ();
  {
    self_1 <- self;
    i_2 <- i;
    r_3 <- r;
    goto BB0
  }
  BB0 {
    _15 <- ();
    _old_13 <- ([#"../../src/union_find.rs" 356 37 356 52] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    _16 <- r_3;
    _18 <- borrow_mut (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self_1));
    self_1 <- { self_1 with current = (let CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind a =  * self_1 in CreusotSandbox_UnionFind_UnionFind_Type.C_UnionFind ( ^ _18)) };
    assume { Resolve0.resolve self_1 };
    _19 <- i_2;
    _17 <- ([#"../../src/union_find.rs" 357 8 357 22] IndexMut0.index_mut _18 _19);
    goto BB2
  }
  BB2 {
    _17 <- { _17 with current = _16 };
    _16 <- any usize;
    assume { Resolve1.resolve _17 };
    assert { [#"../../src/union_find.rs" 358 22 358 45] Seq.get (ShallowModel2.shallow_model (CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self_1))) (UInt64.to_int i_2) = r_3 };
    _20 <- ();
    assert { [#"../../src/union_find.rs" 359 8 359 71] Seq.(==) (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent (ShallowModel0.shallow_model self_1)) (Seq.set (CreusotSandbox_UnionFind_UnionFindModel_Type.unionfindmodel_parent (ShallowModel3.shallow_model _old_13)) (UInt64.to_int i_2) r_3) };
    _22 <- ();
    assert { [#"../../src/union_find.rs" 361 8 361 81] forall i : int . InRange0.in_range (ShallowModel0.shallow_model self_1) i = InRange0.in_range (ShallowModel3.shallow_model _old_13) i };
    _24 <- ();
    _28 <- ();
    _26 <- ([#"../../src/union_find.rs" 362 27 362 94] Ghost.new (LemmaUpdateBelongShortcut0.lemma_update_belong_shortcut (ShallowModel3.shallow_model _old_13) i_2 r_3));
    goto BB3
  }
  BB3 {
    _31 <- ();
    _29 <- ([#"../../src/union_find.rs" 363 27 363 91] Ghost.new (LemmaUpdateBelongUnify0.lemma_update_belong_unify (ShallowModel3.shallow_model _old_13) i_2 r_3));
    goto BB4
  }
  BB4 {
    assert { [#"../../src/union_find.rs" 364 8 367 83] Belong0.belong (ShallowModel3.shallow_model _old_13) (UInt64.to_int i_2) (UInt64.to_int r_3) -> (forall j : int . InRange0.in_range (ShallowModel3.shallow_model _old_13) j -> Belong0.belong (ShallowModel0.shallow_model self_1) j (UInt64.to_int r_3) = Belong0.belong (ShallowModel3.shallow_model _old_13) j (UInt64.to_int r_3)) };
    _32 <- ();
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Stub
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains_Interface
  type t
  use seq.Seq
  predicate contains (self : Seq.seq t) (e : t)
end
module CreusotContracts_Logic_Seq_Impl0_Contains
  type t
  use seq.Seq
  use mach.int.Int
  predicate contains (self : Seq.seq t) (e : t) =
    exists i : int . 0 <= i /\ i < Seq.length self /\ Seq.get self i = e
  val contains (self : Seq.seq t) (e : t) : bool
    ensures { result = contains self e }
    
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl9_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone Core_Num_Impl12_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a
  predicate resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl7_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl7_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl7_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl7_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl7_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Vec_Impl7_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl7_Produces_Stub as Produces0 with
    type t = t,
    type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotSandbox_UnionFind_Impl2_Find_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_Belong_Stub as Belong0
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel_Stub as ShallowModel1
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val find [#"../../src/union_find.rs" 283 4 283 45] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) : usize
    requires {[#"../../src/union_find.rs" 278 15 278 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 280 15 280 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int x)}
    ensures { [#"../../src/union_find.rs" 279 14 279 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 281 14 281 41] Belong0.belong (ShallowModel0.shallow_model self) (UInt64.to_int x) (UInt64.to_int result) }
    ensures { [#"../../src/union_find.rs" 282 14 282 35] Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) }
    
end
module CreusotSandbox_UnionFind_Impl2_Find
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Borrow
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  use mach.int.UInt64
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModelTy_Type as ShallowModelTy3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl5_ShallowModel as ShallowModel7 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel9 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy3.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update as Update1
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl7_Completed as Completed0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Resolve0.resolve = Resolve1.resolve,
    function ShallowModel0.shallow_model = ShallowModel9.shallow_model
  clone Alloc_Vec_IntoIter_Impl5_Item_Type as Item0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel8 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Vec_Impl7_Produces as Produces0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model
  clone CreusotContracts_Std1_Vec_Impl7_ProducesTrans as ProducesTrans0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl7_ProducesRefl as ProducesRefl0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone Alloc_Vec_Impl18_IntoIter_Type as IntoIter2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl2_IntoIterPost as IntoIterPost0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel7.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Std1_Vec_Impl2_IntoIterPre as IntoIterPre0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve4 with
    type t = usize
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy2 with
    type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  clone CreusotSandbox_UnionFind_Impl1_Equal as Equal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotSandbox_UnionFind_Impl2_Update_Interface as Update0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function Update0.update = Update1.update,
    predicate Belong0.belong = Belong0.belong,
    function Equal0.equal = Equal0.equal
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Std1_Vec_Impl6_Invariant as Invariant1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Alloc_Vec_IntoIter_Impl5_Next_Interface as Next0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate Invariant0.invariant' = Invariant1.invariant',
    type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel3 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model
  clone Alloc_Vec_Impl18_IntoIter_Interface as IntoIter1 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Vec_Impl9_Resolve as Resolve0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate Resolve0.resolve = Resolve4.resolve,
    val Max0.mAX' = Max0.mAX'
  clone CreusotSandbox_UnionFind_Impl1_RootBelongRefl as RootBelongRefl0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Belong0.belong = Belong0.belong,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel6.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone Alloc_Vec_Impl15_Index_Interface as Index0 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone CreusotContracts_Logic_Seq_Impl0_Contains as Contains0 with
    type t = usize
  clone Alloc_Vec_Impl0_New_Interface as New0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  let rec cfg find [#"../../src/union_find.rs" 283 4 283 45] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) : usize
    requires {[#"../../src/union_find.rs" 278 15 278 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 280 15 280 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int x)}
    ensures { [#"../../src/union_find.rs" 279 14 279 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 281 14 281 41] Belong0.belong (ShallowModel0.shallow_model self) (UInt64.to_int x) (UInt64.to_int result) }
    ensures { [#"../../src/union_find.rs" 282 14 282 35] Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var x_2 : usize;
  var _old_8 : Ghost.ghost_ty (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _10 : ();
  var r_11 : usize;
  var path_12 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _13 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : usize;
  var _21 : usize;
  var _22 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _23 : usize;
  var _24 : usize;
  var _25 : ();
  var _26 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _27 : usize;
  var _28 : usize;
  var _29 : usize;
  var _30 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _31 : usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _path_ghost_35 : Ghost.ghost_ty (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _37 : ();
  var _38 : Ghost.ghost_ty ();
  var _40 : ();
  var _41 : ();
  var _43 : ();
  var iter_44 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global);
  var _45 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var iter_old_46 : Ghost.ghost_ty (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var _48 : ();
  var produced_49 : Ghost.ghost_ty (Seq.seq usize);
  var _52 : ();
  var _58 : Core_Option_Option_Type.t_option usize;
  var _59 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var _60 : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter usize (Alloc_Alloc_Global_Type.t_global));
  var _61 : isize;
  var i_62 : usize;
  var _63 : Ghost.ghost_ty (Seq.seq usize);
  var _65 : ();
  var j_66 : usize;
  var _67 : ();
  var _69 : ();
  var _70 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _71 : usize;
  var _72 : usize;
  var _73 : ();
  {
    self_1 <- self;
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _10 <- ();
    _old_8 <- ([#"../../src/union_find.rs" 284 37 284 53] Ghost.new ( * self_1));
    goto BB1
  }
  BB1 {
    r_11 <- x_2;
    path_12 <- ([#"../../src/union_find.rs" 286 35 286 41] New0.new ());
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    invariant i_belong { [#"../../src/union_find.rs" 287 8 288 69] forall g : int . Belong0.belong (ShallowModel0.shallow_model self_1) (UInt64.to_int r_11) g -> Belong0.belong (ShallowModel0.shallow_model self_1) (UInt64.to_int x_2) g };
    invariant i_in_range { [#"../../src/union_find.rs" 289 32 289 52] InRange0.in_range (ShallowModel0.shallow_model self_1) (UInt64.to_int r_11) };
    invariant path_belong { [#"../../src/union_find.rs" 287 8 288 69] forall g : int . forall j : usize . Contains0.contains (ShallowModel2.shallow_model path_12) j -> Belong0.belong (ShallowModel0.shallow_model self_1) (UInt64.to_int j) g -> Belong0.belong (ShallowModel0.shallow_model self_1) (UInt64.to_int x_2) g };
    invariant path_in_range { [#"../../src/union_find.rs" 287 8 288 69] forall j : usize . Contains0.contains (ShallowModel2.shallow_model path_12) j -> InRange0.in_range (ShallowModel0.shallow_model self_1) (UInt64.to_int j) };
    _22 <- CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self_1);
    _23 <- r_11;
    _21 <- ([#"../../src/union_find.rs" 295 14 295 28] Index0.index _22 _23);
    goto BB6
  }
  BB6 {
    _20 <- _21;
    _24 <- r_11;
    _19 <- ([#"../../src/union_find.rs" 295 14 295 33] _20 <> _24);
    switch (_19)
      | False -> goto BB10
      | True -> goto BB7
      end
  }
  BB7 {
    _26 <- borrow_mut path_12;
    path_12 <-  ^ _26;
    _27 <- r_11;
    _25 <- ([#"../../src/union_find.rs" 296 12 296 24] Push0.push _26 _27);
    goto BB8
  }
  BB8 {
    _30 <- CreusotSandbox_UnionFind_UnionFind_Type.unionfind_parent ( * self_1);
    _31 <- r_11;
    _29 <- ([#"../../src/union_find.rs" 297 16 297 30] Index0.index _30 _31);
    goto BB9
  }
  BB9 {
    _28 <- _29;
    r_11 <- _28;
    _28 <- any usize;
    _18 <- ();
    goto BB5
  }
  BB10 {
    _13 <- ();
    _37 <- ();
    _path_ghost_35 <- ([#"../../src/union_find.rs" 300 45 300 60] Ghost.new path_12);
    goto BB11
  }
  BB11 {
    _40 <- ();
    _38 <- ([#"../../src/union_find.rs" 301 28 301 82] Ghost.new (LemmaBelongUnique0.lemma_belong_unique (ShallowModel0.shallow_model self_1)));
    goto BB12
  }
  BB12 {
    assert { [#"../../src/union_find.rs" 302 23 302 49] RootBelongRefl0.root_belong_refl (ShallowModel0.shallow_model self_1) };
    _41 <- ();
    assume { Resolve0.resolve _45 };
    _45 <- path_12;
    path_12 <- any Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
    iter_44 <- ([#"../../src/union_find.rs" 303 8 303 46] IntoIter1.into_iter _45);
    goto BB13
  }
  BB13 {
    _48 <- ();
    iter_old_46 <- ([#"../../src/union_find.rs" 303 8 303 46] Ghost.new iter_44);
    goto BB14
  }
  BB14 {
    _52 <- ();
    produced_49 <- ([#"../../src/union_find.rs" 303 8 303 46] Ghost.new (Seq.empty ));
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    invariant type_invariant { [#"../../src/union_find.rs" 303 8 303 46] Invariant1.invariant' iter_44 };
    invariant structural { [#"../../src/union_find.rs" 303 8 303 46] Produces0.produces (Ghost.inner iter_old_46) (Ghost.inner produced_49) iter_44 };
    invariant inv { [#"../../src/union_find.rs" 303 25 303 44] Invariant0.invariant' (ShallowModel0.shallow_model self_1) };
    invariant equal { [#"../../src/union_find.rs" 304 27 304 47] Equal0.equal (ShallowModel0.shallow_model self_1) (ShallowModel3.shallow_model _old_8) };
    invariant root { [#"../../src/union_find.rs" 305 26 305 45] IsRoot0.is_root (ShallowModel0.shallow_model self_1) (UInt64.to_int r_11) };
    _60 <- borrow_mut iter_44;
    iter_44 <-  ^ _60;
    _59 <- borrow_mut ( * _60);
    _60 <- { _60 with current = ( ^ _59) };
    _58 <- ([#"../../src/union_find.rs" 303 8 303 46] Next0.next _59);
    goto BB19
  }
  BB19 {
    assume { Resolve1.resolve _60 };
    switch (_58)
      | Core_Option_Option_Type.C_None -> goto BB20
      | Core_Option_Option_Type.C_Some _ -> goto BB22
      end
  }
  BB20 {
    assume { Resolve2.resolve self_1 };
    _43 <- ();
    goto BB25
  }
  BB21 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve iter_44 };
    absurd
  }
  BB22 {
    i_62 <- Core_Option_Option_Type.some_0 _58;
    _65 <- ();
    _63 <- ([#"../../src/union_find.rs" 303 8 303 46] Ghost.new (Seq.(++) (Ghost.inner produced_49) (Seq.singleton i_62)));
    goto BB23
  }
  BB23 {
    produced_49 <- _63;
    _63 <- any Ghost.ghost_ty (Seq.seq usize);
    j_66 <- i_62;
    assert { [#"../../src/union_find.rs" 307 26 307 63] j_66 = Seq.get (ShallowModel4.shallow_model _path_ghost_35) (Seq.length (Ghost.inner produced_49) - 1) };
    _67 <- ();
    _70 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _70) };
    _71 <- j_66;
    _72 <- r_11;
    _69 <- ([#"../../src/union_find.rs" 308 12 308 29] Update0.update _70 _71 _72);
    goto BB24
  }
  BB24 {
    _18 <- ();
    goto BB18
  }
  BB25 {
    assume { Resolve3.resolve iter_44 };
    _0 <- r_11;
    goto BB26
  }
  BB26 {
    return _0
  }
  
end
module CreusotSandbox_UnionFind_Impl2_Unify_Interface
  use mach.int.UInt64
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl1_Equal_Stub as Equal0
  clone CreusotSandbox_UnionFind_Impl1_SameSet_Stub as SameSet0
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel_Stub as ShallowModel1
  clone CreusotSandbox_UnionFind_Impl1_InRange_Stub as InRange0
  clone CreusotSandbox_UnionFind_Impl1_Invariant_Stub as Invariant0
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val unify [#"../../src/union_find.rs" 326 4 326 55] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) (y : usize) : bool
    requires {[#"../../src/union_find.rs" 314 15 314 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 316 15 316 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int x)}
    requires {[#"../../src/union_find.rs" 317 15 317 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int y)}
    ensures { [#"../../src/union_find.rs" 315 14 315 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 318 4 323 16] forall j : int . forall i : int . SameSet0.same_set (ShallowModel1.shallow_model ( ^ self)) i j = (SameSet0.same_set (ShallowModel0.shallow_model self) i j \/ SameSet0.same_set (ShallowModel0.shallow_model self) i (UInt64.to_int x) /\ SameSet0.same_set (ShallowModel0.shallow_model self) j (UInt64.to_int y) \/ SameSet0.same_set (ShallowModel0.shallow_model self) i (UInt64.to_int y) /\ SameSet0.same_set (ShallowModel0.shallow_model self) j (UInt64.to_int x)) }
    ensures { [#"../../src/union_find.rs" 324 14 324 49] result = (not SameSet0.same_set (ShallowModel0.shallow_model self) (UInt64.to_int x) (UInt64.to_int y)) }
    ensures { [#"../../src/union_find.rs" 325 14 325 46] result = (not Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self)) }
    
end
module CreusotSandbox_UnionFind_Impl2_Unify
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use mach.int.UInt64
  use CreusotSandbox_UnionFind_UnionFindModel_Type as CreusotSandbox_UnionFind_UnionFindModel_Type
  clone CreusotSandbox_UnionFind_Impl1_Update as Update1
  clone CreusotSandbox_UnionFind_Impl1_Parent as Parent0
  clone CreusotSandbox_UnionFind_Impl1_InRange as InRange0
  clone CreusotSandbox_UnionFind_Impl1_IsRoot as IsRoot0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl1_Reach as Reach0 with
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_LemmaReachIff as LemmaReachIff0 with
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_Belong as Belong0 with
    predicate IsRoot0.is_root = IsRoot0.is_root,
    predicate Reach0.reach = Reach0.reach
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl12_Max as Max0
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_InvariantBelong as InvariantBelong0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl1_InvariantRange as InvariantRange0 with
    predicate InRange0.in_range = InRange0.in_range,
    function Parent0.parent = Parent0.parent
  clone CreusotSandbox_UnionFind_Impl0_ShallowModelTy_Type as ShallowModelTy0
  use CreusotSandbox_UnionFind_UnionFind_Type as CreusotSandbox_UnionFind_UnionFind_Type
  clone CreusotSandbox_UnionFind_Impl1_Invariant as Invariant0 with
    predicate InvariantRange0.invariant_range = InvariantRange0.invariant_range,
    predicate InvariantBelong0.invariant_belong = InvariantBelong0.invariant_belong
  clone CreusotSandbox_UnionFind_Impl1_Equal as Equal0 with
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  clone CreusotSandbox_UnionFind_Impl0_ShallowModel as ShallowModel1 with
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    val Max0.mAX' = Max0.mAX'
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotSandbox_UnionFind_Impl2_Update_Interface as Update0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    predicate IsRoot0.is_root = IsRoot0.is_root,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function Update0.update = Update1.update,
    predicate Belong0.belong = Belong0.belong,
    function Equal0.equal = Equal0.equal
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind
  clone CreusotSandbox_UnionFind_Impl2_Find_Interface as Find0 with
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate InRange0.in_range = InRange0.in_range,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    predicate Belong0.belong = Belong0.belong,
    function Equal0.equal = Equal0.equal
  clone CreusotSandbox_UnionFind_Impl1_LemmaBelongUnique as LemmaBelongUnique0 with
    predicate Belong0.belong = Belong0.belong,
    function LemmaReachIff0.lemma_reach_iff = LemmaReachIff0.lemma_reach_iff,
    predicate Reach0.reach = Reach0.reach,
    function Parent0.parent = Parent0.parent,
    axiom .
  clone CreusotSandbox_UnionFind_Impl1_SameSet as SameSet0 with
    predicate InRange0.in_range = InRange0.in_range,
    predicate Belong0.belong = Belong0.belong
  let rec cfg unify [#"../../src/union_find.rs" 326 4 326 55] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind)) (x : usize) (y : usize) : bool
    requires {[#"../../src/union_find.rs" 314 15 314 34] Invariant0.invariant' (ShallowModel0.shallow_model self)}
    requires {[#"../../src/union_find.rs" 316 15 316 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int x)}
    requires {[#"../../src/union_find.rs" 317 15 317 35] InRange0.in_range (ShallowModel0.shallow_model self) (UInt64.to_int y)}
    ensures { [#"../../src/union_find.rs" 315 14 315 34] Invariant0.invariant' (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../src/union_find.rs" 318 4 323 16] forall j : int . forall i : int . SameSet0.same_set (ShallowModel1.shallow_model ( ^ self)) i j = (SameSet0.same_set (ShallowModel0.shallow_model self) i j \/ SameSet0.same_set (ShallowModel0.shallow_model self) i (UInt64.to_int x) /\ SameSet0.same_set (ShallowModel0.shallow_model self) j (UInt64.to_int y) \/ SameSet0.same_set (ShallowModel0.shallow_model self) i (UInt64.to_int y) /\ SameSet0.same_set (ShallowModel0.shallow_model self) j (UInt64.to_int x)) }
    ensures { [#"../../src/union_find.rs" 324 14 324 49] result = (not SameSet0.same_set (ShallowModel0.shallow_model self) (UInt64.to_int x) (UInt64.to_int y)) }
    ensures { [#"../../src/union_find.rs" 325 14 325 46] result = (not Equal0.equal (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var x_2 : usize;
  var y_3 : usize;
  var _11 : Ghost.ghost_ty ();
  var _13 : ();
  var rx_14 : usize;
  var _15 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _16 : usize;
  var ry_17 : usize;
  var _18 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _19 : usize;
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : ();
  var _24 : borrowed (CreusotSandbox_UnionFind_UnionFind_Type.t_unionfind);
  var _25 : usize;
  var _26 : usize;
  {
    self_1 <- self;
    x_2 <- x;
    y_3 <- y;
    goto BB0
  }
  BB0 {
    _13 <- ();
    _11 <- ([#"../../src/union_find.rs" 327 28 327 82] Ghost.new (LemmaBelongUnique0.lemma_belong_unique (ShallowModel0.shallow_model self_1)));
    goto BB1
  }
  BB1 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _16 <- x_2;
    rx_14 <- ([#"../../src/union_find.rs" 328 17 328 29] Find0.find _15 _16);
    goto BB2
  }
  BB2 {
    _18 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _18) };
    _19 <- y_3;
    ry_17 <- ([#"../../src/union_find.rs" 329 17 329 29] Find0.find _18 _19);
    goto BB3
  }
  BB3 {
    _21 <- rx_14;
    _22 <- ry_17;
    _20 <- ([#"../../src/union_find.rs" 330 11 330 19] _21 = _22);
    switch (_20)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    _0 <- ([#"../../src/union_find.rs" 331 12 331 17] false);
    goto BB7
  }
  BB5 {
    _24 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _24) };
    _25 <- rx_14;
    _26 <- ry_17;
    _23 <- ([#"../../src/union_find.rs" 333 12 333 31] Update0.update _24 _25 _26);
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve self_1 };
    _0 <- ([#"../../src/union_find.rs" 334 12 334 16] true);
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module CreusotSandbox_UnionFind_Impl0
  
end
